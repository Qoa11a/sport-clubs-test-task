{"version":3,"sources":["components/ClubList/ClubList.js","App.js","serviceWorker.js","index.js"],"names":["ClubList","state","clubs","citiesOptions","activitiesOptions","query","city","activity","this","getClubs","fetch","then","results","json","setState","reduce","acc","club","some","c","slug","push","act","filteredClubs","filter","isCityFilterPass","isActFilterPass","map","includes","onChange","event","target","value","index","key","title","className","href","link","title_short","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uSA+HeA,G,wDA3Hb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,MAAO,GACPC,cAAe,GACfC,kBAAmB,GACnBC,MAAO,CACLC,KAAM,GACNC,SAAU,KATF,E,gEAeZC,KAAKC,a,iCAGK,IAAD,OACTC,MAAM,iDACHC,MAAK,SAACC,GAAD,OAAaA,EAAQC,UAC1BF,MAAK,SAACT,GACL,EAAKY,SAAS,CACZZ,QACAC,cAAeD,EAAMa,QAAO,SAACC,EAAKC,GAIhC,OAHKD,EAAIE,MAAK,SAACC,GAAD,OAAOA,EAAEC,OAASH,EAAKX,KAAKc,SACxCJ,EAAIK,KAAKJ,EAAKX,MAETU,IACN,IACHZ,kBAAmBF,EAChBa,QAAO,SAACC,EAAKC,GAEZ,OADAD,EAAIK,KAAJ,MAAAL,EAAG,YAASC,EAAKV,WACVS,IACN,IACFD,QAAO,SAACC,EAAKM,GAIZ,OAHKN,EAAIE,MAAK,SAACC,GAAD,OAAOA,EAAEC,OAASE,EAAIF,SAClCJ,EAAIK,KAAKC,GAEJN,IACN,W,+BAKH,IAAD,SACoDR,KAAKP,MAAxDI,EADD,EACCA,MAAOH,EADR,EACQA,MAAOC,EADf,EACeA,cAAeC,EAD9B,EAC8BA,kBAE/BmB,EAAgBrB,EAAMsB,QAAO,SAACP,GAClC,IACMQ,EADWR,EAAKX,KAAKc,OACWf,EAAMC,MAAuB,KAAfD,EAAMC,KAEpDoB,EADWT,EAAKV,SAASoB,KAAI,SAACL,GAAD,OAASA,EAAIF,QAErCQ,SAASvB,EAAME,WAAgC,KAAnBF,EAAME,SAE7C,OAAOkB,GAAoBC,KAG7B,OACE,oCACE,8CACA,4BACEG,SAAU,SAACC,GACT,EAAKhB,SAAS,CACZT,MAAO,CACLC,KAAMwB,EAAMC,OAAOC,MACnBzB,SAAU,EAAKN,MAAMI,MAAME,cAKjC,4BAAQyB,MAAM,IAAd,oBACC7B,EAAcwB,KAAI,SAACrB,EAAM2B,GACxB,OACE,4BAAQC,IAAKD,EAAOD,MAAO1B,EAAKc,MAC7Bd,EAAK6B,WAMd,kDACA,4BACEN,SAAU,SAACC,GACT,EAAKhB,SAAS,CACZT,MAAO,CACLC,KAAM,EAAKL,MAAMI,MAAMC,KACvBC,SAAUuB,EAAMC,OAAOC,WAK7B,4BAAQA,MAAM,IAAd,oBACC5B,EAAkBuB,KAAI,SAACpB,EAAU0B,GAAX,OACrB,4BAAQC,IAAKD,EAAOD,MAAOzB,EAASa,MACjCb,EAAS4B,WAKhB,yBAAKC,UAAU,YACZb,EAAcI,KAAI,SAACV,EAAMgB,GACxB,OACE,yBAAKC,IAAKD,EAAOG,UAAU,YACzB,4BACE,uBAAGC,KAAMpB,EAAKqB,MAAOrB,EAAKsB,cAE5B,oCAAUtB,EAAKX,KAAK6B,OACpB,0CACc,IACXlB,EAAKV,SAASoB,KAAI,SAACL,EAAKW,GACvB,OAAO,wBAAIC,IAAKD,GAAQX,EAAIa,qB,GAhHzBK,IAAMC,Y,MCOdC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.75007379.chunk.js","sourcesContent":["import React from 'react';\nimport './ClubList.css';\n\nclass ClubList extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      clubs: [],\n      citiesOptions: [],\n      activitiesOptions: [],\n      query: {\n        city: '',\n        activity: '',\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.getClubs();\n  }\n\n  getClubs() {\n    fetch('https://instasport.co/dashboard/api/v1/clubs/')\n      .then((results) => results.json())\n      .then((clubs) => {\n        this.setState({\n          clubs,\n          citiesOptions: clubs.reduce((acc, club) => {\n            if (!acc.some((c) => c.slug === club.city.slug)) {\n              acc.push(club.city);\n            }\n            return acc;\n          }, []),\n          activitiesOptions: clubs\n            .reduce((acc, club) => {\n              acc.push(...club.activity);\n              return acc;\n            }, [])\n            .reduce((acc, act) => {\n              if (!acc.some((c) => c.slug === act.slug)) {\n                acc.push(act);\n              }\n              return acc;\n            }, []),\n        });\n      });\n  }\n\n  render() {\n    const { query, clubs, citiesOptions, activitiesOptions } = this.state;\n\n    const filteredClubs = clubs.filter((club) => {\n      const citySlug = club.city.slug;\n      const isCityFilterPass = citySlug === query.city || query.city === '';\n      const actSlugs = club.activity.map((act) => act.slug);\n      const isActFilterPass =\n        actSlugs.includes(query.activity) || query.activity === '';\n\n      return isCityFilterPass && isActFilterPass;\n    });\n\n    return (\n      <>\n        <span>Select City:</span>\n        <select\n          onChange={(event) => {\n            this.setState({\n              query: {\n                city: event.target.value,\n                activity: this.state.query.activity,\n              },\n            });\n          }}\n        >\n          <option value=''>Select an option</option>\n          {citiesOptions.map((city, index) => {\n            return (\n              <option key={index} value={city.slug}>\n                {city.title}\n              </option>\n            );\n          })}\n        </select>\n\n        <span>Select Activity:</span>\n        <select\n          onChange={(event) => {\n            this.setState({\n              query: {\n                city: this.state.query.city,\n                activity: event.target.value,\n              },\n            });\n          }}\n        >\n          <option value=''>Select an option</option>\n          {activitiesOptions.map((activity, index) => (\n            <option key={index} value={activity.slug}>\n              {activity.title}\n            </option>\n          ))}\n        </select>\n\n        <div className='clubList'>\n          {filteredClubs.map((club, index) => {\n            return (\n              <div key={index} className='clubItem'>\n                <h1>\n                  <a href={club.link}>{club.title_short}</a>\n                </h1>\n                <p>City: {club.city.title}</p>\n                <ul>\n                  Activities:{' '}\n                  {club.activity.map((act, index) => {\n                    return <li key={index}>{act.title}</li>;\n                  })}\n                </ul>\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ClubList;\n","import React from 'react';\nimport ClubList from './components/ClubList/ClubList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <ClubList />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}