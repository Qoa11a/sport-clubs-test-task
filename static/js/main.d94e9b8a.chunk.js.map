{"version":3,"sources":["Loader.js","components/ClubList/ClubList.js","App.js","serviceWorker.js","index.js"],"names":["className","getActivitiesOptions","clubs","cityForFilter","reduce","acc","club","city","slug","push","activity","act","some","c","getCitiesOptions","activityForFilter","map","includes","ClubList","state","citiesOptions","activitiesOptions","query","isLoading","this","getClubs","fetch","then","results","json","setState","filteredClubs","filter","isCityFilterPass","isActFilterPass","onChange","event","target","value","setTimeout","index","key","title","Loader","href","link","src","logo","alt","title_short","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d94e9b8a.chunk.js","sourcesContent":["import React from 'react';\n\nexport default () => (\n  <div className='loader'>\n    <div className='lds-ring'>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport './ClubList.scss';\nimport Loader from '../../Loader';\n\nconst getActivitiesOptions = (clubs, cityForFilter) => {\n  return clubs\n    .reduce((acc, club) => {\n      if (cityForFilter === club.city.slug || !cityForFilter) {\n        acc.push(...club.activity);\n      }\n      return acc;\n    }, [])\n    .reduce((acc, act) => {\n      if (!acc.some((c) => c.slug === act.slug)) {\n        acc.push(act);\n      }\n      return acc;\n    }, []);\n};\n\nconst getCitiesOptions = (clubs, activityForFilter) => {\n  return clubs.reduce((acc, club) => {\n    if (\n      !acc.some((c) => c.slug === club.city.slug) &&\n      (club.activity.map((act) => act.slug).includes(activityForFilter) ||\n        !activityForFilter)\n    ) {\n      acc.push(club.city);\n    }\n    return acc;\n  }, []);\n};\n\nclass ClubList extends React.Component {\n  state = {\n    clubs: [],\n    citiesOptions: [],\n    activitiesOptions: [],\n    query: {\n      city: '',\n      activity: '',\n    },\n    isLoading: true,\n  };\n\n  componentDidMount() {\n    this.getClubs();\n  }\n\n  getClubs() {\n    fetch('https://instasport.co/dashboard/api/v1/clubs/')\n      .then((results) => results.json())\n      .then((clubs) => {\n        this.setState({\n          clubs,\n          citiesOptions: getCitiesOptions(clubs),\n          activitiesOptions: getActivitiesOptions(clubs),\n          isLoading: false,\n        });\n      });\n  }\n\n  updateCitiesOptions() {}\n\n  render() {\n    const {\n      query,\n      clubs,\n      citiesOptions,\n      activitiesOptions,\n      isLoading,\n    } = this.state;\n\n    const filteredClubs = clubs.filter((club) => {\n      const citySlug = club.city.slug;\n      const isCityFilterPass = citySlug === query.city || query.city === '';\n      const actSlugs = club.activity.map((act) => act.slug);\n      const isActFilterPass =\n        actSlugs.includes(query.activity) || query.activity === '';\n\n      return isCityFilterPass && isActFilterPass;\n    });\n\n    return (\n      <main className='main__container'>\n        <div className='clubFilters'>\n          <div className='clubFilters__cityFilter_container'>\n            <span className='clubFilters__cityFilter_title'>\n              Выберите Город:\n            </span>\n            <div className='select'>\n              <select\n                onChange={(event) => {\n                  const city = event.target.value;\n                  this.setState({\n                    isLoading: true,\n                  });\n                  setTimeout(() => {\n                    this.setState({\n                      query: {\n                        city,\n                        activity: this.state.query.activity,\n                      },\n                      activitiesOptions: getActivitiesOptions(clubs, city),\n                      isLoading: false,\n                    });\n                  }, 1000);\n                }}\n                value={this.state.query.city}\n              >\n                <option value=''>Все города</option>\n                {citiesOptions.map((city, index) => {\n                  return (\n                    <option key={index} value={city.slug}>\n                      {city.title}\n                    </option>\n                  );\n                })}\n              </select>\n            </div>\n          </div>\n          <div className='clubFilters__activityFilter_container'>\n            <span className='clubFilters__activityFilter_title'>\n              Выберите Направление:\n            </span>\n            <div className='select'>\n              <select\n                onChange={(event) => {\n                  const activity = event.target.value;\n                  this.setState({\n                    isLoading: true,\n                  });\n                  setTimeout(() => {\n                    this.setState({\n                      query: {\n                        city: this.state.query.city,\n                        activity,\n                      },\n                      citiesOptions: getCitiesOptions(clubs, activity),\n                      isLoading: false,\n                    });\n                  }, 1000);\n                }}\n                value={this.state.query.activity}\n              >\n                <option value=''>Все направления</option>\n                {activitiesOptions.map((activity, index) => (\n                  <option key={index} value={activity.slug}>\n                    {activity.title}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <div className='clubList'>\n            {filteredClubs.map((club, index) => {\n              return (\n                <a href={club.link} className='clubList__clubItem_link'>\n                  <div key={index} className='clubList__clubItem clubItem'>\n                    <img\n                      src={club.logo}\n                      alt='Club Logo'\n                      className='clubItem__logo'\n                    />\n                    <h1 className='clubItem__title'>{club.title_short}</h1>\n                  </div>\n                </a>\n              );\n            })}\n          </div>\n        )}\n      </main>\n    );\n  }\n}\n\nexport default ClubList;\n","import React from 'react';\nimport ClubList from './components/ClubList/ClubList';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <>\n      <div className='header'>\n        <h1 className='header__title'>Instasport</h1>\n      </div>\n      <ClubList />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}