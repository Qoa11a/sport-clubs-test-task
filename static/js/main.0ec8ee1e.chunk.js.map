{"version":3,"sources":["helpers/getActivitiesOptions.js","helpers/getCitiesOptions.js","components/Loader/Loader.js","components/ClubList/ClubList.js","App.js","serviceWorker.js","index.js"],"names":["clubs","cityForFilter","reduce","acc","club","city","slug","push","activity","act","some","c","activityForFilter","map","includes","className","ClubList","state","citiesOptions","activitiesOptions","query","isLoading","onChangeCityFilter","event","target","value","setState","getActivitiesOptions","startFakeTimeout","onChangeActivityFilter","getCitiesOptions","this","getClubs","fetch","then","results","json","setTimeout","filteredClubs","filter","isCityFilterPass","isActFilterPass","onChange","index","key","title","href","link","src","logo","alt","title_short","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0ec8ee1e.chunk.js","sourcesContent":["export default (clubs, cityForFilter) => {\n  return clubs\n    .reduce((acc, club) => {\n      if (cityForFilter === club.city.slug || !cityForFilter) {\n        acc.push(...club.activity);\n      }\n      return acc;\n    }, [])\n    .reduce((acc, act) => {\n      if (!acc.some((c) => c.slug === act.slug)) {\n        acc.push(act);\n      }\n      return acc;\n    }, []);\n};\n","export default (clubs, activityForFilter) => {\n  return clubs.reduce((acc, club) => {\n    if (\n      !acc.some((c) => c.slug === club.city.slug) &&\n      (club.activity.map((act) => act.slug).includes(activityForFilter) ||\n        !activityForFilter)\n    ) {\n      acc.push(club.city);\n    }\n    return acc;\n  }, []);\n};\n","import React from 'react';\n\nimport './Loader.scss';\n\nexport default () => (\n  <div className='loader'>\n    <div className='lds-ring'>\n      <div />\n      <div />\n      <div />\n      <div />\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport { getCitiesOptions, getActivitiesOptions } from '../../helpers';\n\nimport Loader from '../Loader/Loader';\n\nimport './ClubList.scss';\n\nconst FAKE_FETCH_TIMEOUT = 1000;\n\nclass ClubList extends React.Component {\n  state = {\n    clubs: [],\n    citiesOptions: [],\n    activitiesOptions: [],\n    query: {\n      city: '',\n      activity: '',\n    },\n    isLoading: false,\n  };\n\n  componentDidMount() {\n    this.getClubs();\n  }\n\n  getClubs() {\n    this.setState(() => ({\n      isLoading: true,\n    }));\n    fetch('https://instasport.co/dashboard/api/v1/clubs/')\n      .then((results) => results.json())\n      .then((clubs) => {\n        this.setState({\n          clubs,\n          citiesOptions: getCitiesOptions(clubs),\n          activitiesOptions: getActivitiesOptions(clubs),\n          isLoading: false,\n        });\n      });\n  }\n\n  startFakeTimeout() {\n    setTimeout(() => {\n      this.setState(() => ({\n        isLoading: false,\n      }));\n    }, FAKE_FETCH_TIMEOUT);\n  }\n\n  onChangeCityFilter = (event) => {\n    const { clubs, query } = this.state;\n    const city = event.target.value;\n    this.setState(() => ({\n      isLoading: true,\n      query: {\n        ...query,\n        city,\n      },\n      activitiesOptions: getActivitiesOptions(clubs, city),\n    }));\n    this.startFakeTimeout();\n  };\n\n  onChangeActivityFilter = (event) => {\n    const { clubs, query } = this.state;\n    const activity = event.target.value;\n    this.setState(() => ({\n      isLoading: true,\n      query: {\n        ...query,\n        activity,\n      },\n      citiesOptions: getCitiesOptions(clubs, activity),\n    }));\n    this.startFakeTimeout();\n  };\n\n  render() {\n    const {\n      query,\n      clubs,\n      citiesOptions,\n      activitiesOptions,\n      isLoading,\n    } = this.state;\n\n    const filteredClubs = clubs.filter((club) => {\n      const citySlug = club.city.slug;\n      const isCityFilterPass = citySlug === query.city || query.city === '';\n      const actSlugs = club.activity.map((act) => act.slug);\n      const isActFilterPass =\n        actSlugs.includes(query.activity) || query.activity === '';\n\n      return isCityFilterPass && isActFilterPass;\n    });\n\n    return (\n      <main className='main__container'>\n        <div className='clubFilters'>\n          <div className='clubFilters__cityFilter_container'>\n            <span className='clubFilters__cityFilter_title'>\n              Выберите Город:\n            </span>\n            <div className='select'>\n              <select\n                onChange={this.onChangeCityFilter}\n                value={this.state.query.city}\n              >\n                <option value=''>Все города</option>\n\n                {citiesOptions.map((city, index) => {\n                  return (\n                    <option key={index} value={city.slug}>\n                      {city.title}\n                    </option>\n                  );\n                })}\n              </select>\n            </div>\n          </div>\n\n          <div className='clubFilters__activityFilter_container'>\n            <span className='clubFilters__activityFilter_title'>\n              Выберите Направление:\n            </span>\n            <div className='select'>\n              <select\n                onChange={this.onChangeActivityFilter}\n                value={this.state.query.activity}\n              >\n                <option value=''>Все направления</option>\n\n                {activitiesOptions.map((activity, index) => (\n                  <option key={index} value={activity.slug}>\n                    {activity.title}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <div className='clubList'>\n            {filteredClubs.map((club, index) => {\n              return (\n                <a\n                  href={club.link}\n                  className='clubList__clubItem_link'\n                  key={index}\n                >\n                  <div className='clubList__clubItem clubItem'>\n                    <img\n                      src={club.logo}\n                      alt='Club Logo'\n                      className='clubItem__logo'\n                    />\n                    <h1 className='clubItem__title'>{club.title_short}</h1>\n                  </div>\n                </a>\n              );\n            })}\n          </div>\n        )}\n      </main>\n    );\n  }\n}\n\nexport default ClubList;\n","import React from 'react';\nimport ClubList from './components/ClubList/ClubList';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <>\n      <div className='header'>\n        <h1 className='header__title'>Instasport</h1>\n      </div>\n      <ClubList />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}