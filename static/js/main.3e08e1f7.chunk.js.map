{"version":3,"sources":["Loader.js","components/ClubList/ClubList.js","App.js","serviceWorker.js","index.js"],"names":["className","class","ClubList","state","clubs","citiesOptions","activitiesOptions","query","city","activity","isLoading","this","getClubs","fetch","then","results","json","setTimeout","setState","reduce","acc","club","some","c","slug","push","act","filteredClubs","filter","isCityFilterPass","isActFilterPass","map","includes","onChange","event","target","value","index","key","title","Loader","href","link","src","logo","alt","title_short","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3e08e1f7.chunk.js","sourcesContent":["import React from 'react';\n\nexport default () => (\n  <div className='loader'>\n    <div class='lds-ring'>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport './ClubList.scss';\nimport Loader from '../../Loader';\n\nclass ClubList extends React.Component {\n  state = {\n    clubs: [],\n    citiesOptions: [],\n    activitiesOptions: [],\n    query: {\n      city: '',\n      activity: '',\n    },\n    isLoading: true,\n  };\n\n  componentDidMount() {\n    this.getClubs();\n  }\n\n  getClubs() {\n    fetch('https://instasport.co/dashboard/api/v1/clubs/')\n      .then((results) => results.json())\n      .then((clubs) => {\n        // I just want to show loader, that's why I have timeout here\n        setTimeout(() => {\n          this.setState({\n            clubs,\n            citiesOptions: clubs.reduce((acc, club) => {\n              if (!acc.some((c) => c.slug === club.city.slug)) {\n                acc.push(club.city);\n              }\n              return acc;\n            }, []),\n            activitiesOptions: clubs\n              .reduce((acc, club) => {\n                acc.push(...club.activity);\n                return acc;\n              }, [])\n              .reduce((acc, act) => {\n                if (!acc.some((c) => c.slug === act.slug)) {\n                  acc.push(act);\n                }\n                return acc;\n              }, []),\n            isLoading: false,\n          });\n        }, 1000);\n      });\n  }\n\n  render() {\n    const {\n      query,\n      clubs,\n      citiesOptions,\n      activitiesOptions,\n      isLoading,\n    } = this.state;\n\n    const filteredClubs = clubs.filter((club) => {\n      const citySlug = club.city.slug;\n      const isCityFilterPass = citySlug === query.city || query.city === '';\n      const actSlugs = club.activity.map((act) => act.slug);\n      const isActFilterPass =\n        actSlugs.includes(query.activity) || query.activity === '';\n\n      return isCityFilterPass && isActFilterPass;\n    });\n\n    return (\n      <main className='main__container'>\n        <div className='clubFilters'>\n          <div className='clubFilters__cityFilter_container'>\n            <span className='clubFilters__cityFilter_title'>\n              Выберите Город:\n            </span>\n            <div className='select'>\n              <select\n                onChange={(event) => {\n                  this.setState({\n                    query: {\n                      city: event.target.value,\n                      activity: this.state.query.activity,\n                    },\n                  });\n                }}\n              >\n                <option value=''>Все города</option>\n                {citiesOptions.map((city, index) => {\n                  return (\n                    <option key={index} value={city.slug}>\n                      {city.title}\n                    </option>\n                  );\n                })}\n              </select>\n            </div>\n          </div>\n\n          <div className='clubFilters__activityFilter_container'>\n            <span className='clubFilters__activityFilter_title'>\n              Выберите Направление:\n            </span>\n            <div className='select'>\n              <select\n                onChange={(event) => {\n                  this.setState({\n                    query: {\n                      city: this.state.query.city,\n                      activity: event.target.value,\n                    },\n                  });\n                }}\n              >\n                <option value=''>Все направления</option>\n                {activitiesOptions.map((activity, index) => (\n                  <option key={index} value={activity.slug}>\n                    {activity.title}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <div className='clubList'>\n            {filteredClubs.map((club, index) => {\n              return (\n                <a href={club.link} className='clubList__clubItem_link'>\n                  <div key={index} className='clubList__clubItem clubItem'>\n                    <img\n                      src={club.logo}\n                      alt='Club Logo'\n                      className='clubItem__logo'\n                    />\n                    <h1 className='clubItem__title'>{club.title_short}</h1>\n                  </div>\n                </a>\n              );\n            })}\n          </div>\n        )}\n      </main>\n    );\n  }\n}\n\nexport default ClubList;\n","import React from 'react';\nimport ClubList from './components/ClubList/ClubList';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <>\n      <div className='header'>\n        <h1 className='header__title'>Instasport</h1>\n      </div>\n      <ClubList />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}